#... this is the main thing... College22, Student23 are type_definitions22
type Query {
   greeting: String
   students: [Student23]
   studentById(id:ID!): Student23
   sayHello(name:String!):String
   spanishWishes (name:String!): String
   charactersRslvr11: [characters23]
   singleCharByName11(id:Int): characters23  
}

type Mutation {
   
   #... this returns a string --> which is newly created studentId
   createStudent12(collegeId:ID,firstName:String,lastName:String):String

   #... But we want to return the whole Object... to verify that all details got inserted
   createStudent13(collegeId143:ID,firstName:String,lastName:String, email:String):Student23

   signUp(input:SignUpInput):String
}

#... these are interfaces ..........................................
type College22 {
   id: ID!
   name: String
   location: String
   rating: Float
}

input SignUpInput {
   email:String!,
   password:String!,
   firstName:String!
}

type Student23 {
   id:ID!
   firstName: String
   lastName: String
   fullName: String
   password: String
   email: String
   collegeId44: College22
}

type Int23 {
  value: Int
}

type String23 {
  value: String
}

union FloatOrString23 = Int23 | String23

type characters23 {
    id: Int,
    name: String,
    height: Float,

    ### this throws ERROR
    mass: String,
    
    # mass: FloatOrString23,                ### something not working -- look into it later
    
    hair_color: String,
    skin_color: String,
    eye_color: String,
    birth_year: String,
    gender: String,
    homeworld: String,
    species: String
}
#... end of interfaces ..........................................